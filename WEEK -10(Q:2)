/*
Given a long list of tasks. Each task takes specific time to accomplish it and each task has a
deadline associated with it. You have to design an algorithm and implement it using a program to
find maximum number of tasks that can be completed without crossing their deadlines and also
find list of selected tasks.
*/
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool compare(pair<int, int> a, pair<int, int> b)
{
    return a.first > b.first; // Sort in descending order of time taken
}

int main()
{
    vector<pair<int, int>> task;
    int n, time, deadline;
    
    cout << "Input the total number of tasks: ";
    cin >> n;
    
    for (int i = 0; i < n; i++)
    {
        cout << "Input time taken and deadline for task " << i + 1 << ": ";
        cin >> time >> deadline;
        task.push_back(make_pair(time, deadline));
    }
    
    sort(task.begin(), task.end(), compare);

    int maxTasks = 0;
    vector<int> selectedTasks;
    bool slots[n];
    for (int i = 0; i < n; i++)
    {
        slots[i] = false;
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = min(n, task[i].second) - 1; j >= 0; j--)
        {
            if (!slots[j])
            {
                slots[j] = true;
                maxTasks++;
                selectedTasks.push_back(i + 1);
                break;
            }
        }
    }

    cout << "Max number of tasks = " << maxTasks << endl;
    cout << "Selected task numbers: ";
    for (int i = 0; i < selectedTasks.size(); i++)
    {
        cout << selectedTasks[i];
        if (i < selectedTasks.size() - 1)
            cout << ", ";
    }
    cout << endl;

    return 0;
}
