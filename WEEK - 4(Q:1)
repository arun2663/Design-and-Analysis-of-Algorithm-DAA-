/*
Given an unsorted array of integers, design an algorithm and implement it using a program to
sort an array of elements by dividing the array into two subarrays and combining these subarrays
after sorting each one of them. Your program should also find number of comparisons and
inversions during sorting the array.
*/
#include<iostream>
#include<math.h>
#include<bits/stdc++.h>
using namespace std;
void merge(int a[],int l,int mid,int r,int &comparisons,int &inversions)
{
    int n1=mid-l+1;
    int n2=r-mid;
    int L[n1],R[n2];
    for(int i=0;i<n1;i++)
    {
        L[i]=a[l+i];
    }
    for(int i=0;i<n2;i++)
    {
        R[i]=a[mid+1+i];
    }
    int i=0;
    int j=0;
    int k=l;
    while(i<n1&&j<n2)
    {
        comparisons++;
        if(L[i]<R[j])
        {
            a[k]=L[i];
            i++;
            k++;
        }
        else
        {
            a[k]=R[j];
            k++;
            j++;
            inversions+=(mid-i+1);
        }
    }
    while(i<n1)
    {
        a[k]=L[i];
        i++;
        k++;
    }
    while(j<n2)
    {
        a[k]=R[j];
        j++;
        k++;
    }
}
void mergesort(int a[],int l,int r,int &comparisons,int &inversions)
{
    if(l<r)
    {
        int mid=(l+r)/2;
        mergesort(a,l,mid,comparisons,inversions);
        mergesort(a,mid+1,r,comparisons,inversions);
        merge(a,l,mid,r,comparisons,inversions);
    }
}
int main()
{
    int n,t,key,inversions=0,comparisons=0;
    cout<<"Input no of test cases"<<endl;
    cin>>t;
    while(t--)
    {
        cout<<"Input size of array"<<endl;
        cin>>n;
        int a[n];
        cout<<"Input elements in an array"<<endl;
        for(int i=0;i<n;i++)
        {
            cin>>a[i];
        }
        mergesort(a,0,n-1,comparisons,inversions);
        for(int i=0;i<n;i++)
        {
            cout<<a[i]<<"\t";
        }
        cout<<comparisons<<endl<<inversions<<endl;
    }
    return 0;
}

