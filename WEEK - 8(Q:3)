/*
Assume that same road construction project is given to another person. The amount he will earn from this project is directly proportional to the budget of the project. This person is greedy, so he decided to maximize the budget by constructing those roads who have highest construction cost. Design an algorithm and implement it using a program to find the maximum budget required for the project.
*/
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src;
    int dest;
    int weight;

    Edge(int _src, int _dest, int _weight) : src(_src), dest(_dest), weight(_weight) {}
};

// Find operation for the disjoint set data structure
int find(vector<int>& parent, int node) {
    if (parent[node] == node) {
        return node;
    }
    return find(parent, parent[node]);
}

// Union operation for the disjoint set data structure
void Union(vector<int>& parent, vector<int>& rank, int x, int y) {
    int xRoot = find(parent, x);
    int yRoot = find(parent, y);

    if (rank[xRoot] < rank[yRoot]) {
        parent[xRoot] = yRoot;
    } else if (rank[xRoot] > rank[yRoot]) {
        parent[yRoot] = xRoot;
    } else {
        parent[yRoot] = xRoot;
        rank[xRoot]++;
    }
}

// Comparator for sorting edges based on their weights in descending order
bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight > b.weight;
}

// Function to find the maximum spanning weight using Kruskal's algorithm
int findMaximumSpanningWeight(int numVertices, const vector<Edge>& edges) {
    vector<int> parent(numVertices);
    vector<int> rank(numVertices, 0);

    for (int i = 0; i < numVertices; ++i) {
        parent[i] = i; // Initialize each vertex as a separate disjoint set
    }

    int maximumSpanningWeight = 0;
    int edgesIncluded = 0;

    for (const Edge& edge : edges) {
        int srcRoot = find(parent, edge.src);
        int destRoot = find(parent, edge.dest);

        if (srcRoot != destRoot) {
            Union(parent, rank, srcRoot, destRoot);
            maximumSpanningWeight += edge.weight;
            edgesIncluded++;
        }

        // Stop when N-1 edges have been included
        if (edgesIncluded == numVertices - 1) {
            break;
        }
    }

    return maximumSpanningWeight;
}

int main() {
    int numVertices;
    cout << "Enter the number of vertices in the graph: ";
    cin >> numVertices;

    vector<Edge> edges;

    cout << "Enter the adjacency matrix or adjacency list of the graph:\n";
    for (int i = 0; i < numVertices; ++i) {
        for (int j = 0; j < numVertices; ++j) {
            int weight;
            cin >> weight;

            if (weight != 0) {
                edges.push_back(Edge(i, j, weight));
            }
        }
    }

    // Sort the edges based on their weights in descending order
    sort(edges.begin(), edges.end(), compareEdges);

    int maximumSpanningWeight = findMaximumSpanningWeight(numVertices, edges);
    cout << "Maximum Spanning Weight: " << maximumSpanningWeight << endl;

    return 0;
}
