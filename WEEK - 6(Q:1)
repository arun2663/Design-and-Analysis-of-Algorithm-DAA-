/*
Given a (directed/undirected) graph, design an algorithm and implement it using a program to find if a path exists between two given vertices or not. (Hint: use DFS)
*/
#include <iostream>
#include <vector>

using namespace std;

void dfs(vector<vector<int>>& graph, int source, int destination, vector<bool>& visited, bool& pathExists) {
    visited[source] = true;
    if (source == destination) {
        pathExists = true;
        return;
    }

    for (int i = 0; i < graph[source].size(); i++) {
        int neighbor = graph[source][i];
        if (!visited[neighbor]) {
            dfs(graph, neighbor, destination, visited, pathExists);
        }
    }
}

int main() {
    int n; // number of vertices in the graph
    cin >> n;

    // reading the graph as adjacency list
    vector<vector<int>> graph(n, vector<int>());
    for (int i = 0; i < n; i++) {
        string row;
        cin >> row;
        for (int j = 0; j < row.size(); j++) {
            if (row[j] == '1') {
                graph[i].push_back(j);
            }
        }
    }

    int source, destination;
    cin >> source >> destination;

    vector<bool> visited(n, false);
    bool pathExists = false;

    dfs(graph, source - 1, destination - 1, visited, pathExists);

    if (pathExists) {
        cout << "Yes Path Exists" << endl;
    } else {
        cout << "No Such Path Exists" << endl;
    }

    return 0;
}
