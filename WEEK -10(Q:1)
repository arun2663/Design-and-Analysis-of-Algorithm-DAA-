/*
Given a list of activities with their starting time and finishing time. Your goal is to select
maximum number of activities that can be performed by a single person such that selected
activities must be non-conflicting. Any activity is said to be non-conflicting if starting time of an
activity is greater than or equal to the finishing time of the other activity. Assume that a person
can only work on a single activity at a time.
*/
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main()
{
    vector<pair<int, int>> activity;
    int n, start, finish;
    
    cout << "Input the number of activities: ";
    cin >> n;
    
    cout << "Input the start time and end time for each activity:\n";
    for (int i = 0; i < n; i++)
    {
        cin >> start >> finish;
        activity.push_back(make_pair(start, finish));
    }
    
    sort(activity.begin(), activity.end(), [](pair<int, int> a, pair<int, int> b) {
        return a.second < b.second;
    });
    
    vector<pair<int, int>> selectedActivities;
    selectedActivities.push_back(activity[0]);
    
    int lastFinishTime = activity[0].second;
    
    for (int i = 1; i < n; i++)
    {
        if (activity[i].first >= lastFinishTime)
        {
            selectedActivities.push_back(activity[i]);
            lastFinishTime = activity[i].second;
        }
    }
    
    cout << "No. of non-conflicting activities: " << selectedActivities.size() << endl;
    cout << "List of selected activities: ";
    for (int i = 0; i < selectedActivities.size(); i++)
    {
        cout << i+1;
        if (i < selectedActivities.size() - 1)
            cout << ", ";
    }
    cout << endl;
    
    return 0;
}
