/*
Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether a given key element is present in the sorted array or not. For an array arr[n], search at the indexes arr[0], arr[2], arr[4],.....,arr[2k] and so on. Once the interval (arr[2k] < key < arr[ 2k+1] ) is found, perform a linear search operation from the index 2k to find the element key. (Complexity < O(n), where n is the number of elements need to be scanned for searching)
*/
#include<iostream>
#include<math.h>
using namespace std;
int jumpsearch(int a[],int n,int key,int &c)
{
    int start=0,ending=sqrt(n);
    while(ending<n && a[ending]<=key)
    {
        c++;
        start=ending;
        ending+=sqrt(n);
        if(ending>n-1)
        {
            ending=n-1;
        }
    }
    for(int i=start;i<=ending;i++)
    {
        if(a[i]==key)
        {
            c++;
            return i;
        }
    }
    return -1;
}
int main()
{
    int n,i,t,key,index=0;
    cout<<"Input no of test cases"<<endl;
    cin>>t;
    while(t--)
    {
        cout<<"Input size of array"<<endl;
        cin>>n;
        int a[n];
        cout<<"Input elements in an array"<<endl;
        for(i=0;i<n;i++)
        {
            cin>>a[i];
        }
        cout<<"Input key to search"<<endl;
        cin>>key;
        int c=0;
        index=jumpsearch(a,n,key,c);
        if(index==-1)
            cout<<"Not present"<<endl<<c+1<<endl;
        else
        {
            cout<<"Present "<<c+1<<endl;
        }
    }
}


